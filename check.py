# from pymilvus import connections, Collection, IndexType

# connections.connect("default", host="localhost", port="19530")  # Ensure this matches your Milvus host/port

# query_vectors = [
#     [-0.0866274834,0.0416379496,0.0423516333,-0.0918563381,-0.0180820953,0.0461563766,0.110857777,0.0116646579,0.0502041467,0.0302920919,0.13489382,-0.105250537,-0.03250793,-0.00119595788,-0.0204032473,-0.0699268728,-0.119197205,0.0110089974,-0.041849345,-0.100167438,-0.0503922701,0.0661106929,-0.0278253648,-0.00440366659,-0.0351713784,-0.0533542186,-0.00169388053,0.0637860373,0.0411454961,-0.0604734309,0.0333902687,0.0758917481,0.0102121327,-0.0228201933,-0.00494102342,-0.0281251092,0.0156067712,-0.0713273,0.0370770916,0.0137164369,-0.0489340648,-0.00905541144,0.0183238965,-0.0615139306,0.0639796555,0.0297519583,-0.0620846525,-0.0282309335,-0.0101129273,-0.0116897672,-0.0474028774,0.0831155,0.0163994692,0.0665461943,-0.0214982033,0.013011341,-0.0335093886,0.00290689291,0.0590231158,-0.00264864392,-0.0686943233,0.0493247285,-0.0324474797,-0.0167708881,0.0109889479,-0.0710062757,-0.029924579,-0.00532738958,0.0091213,0.0511986762,-0.057551004,-0.0788277835,-0.0969205424,-0.0107865324,-0.0963584855,0.0517621972,-0.0404396355,0.037797574,0.0163271949,-0.0862370357,-0.00381576805,0.00989438407,0.0351600051,-0.0453695096,-0.0740502477,0.071479179,-0.0591944866,-0.0148221701,-0.00439444743,-0.0443825647,0.0120050171,0.103095382,0.04808883,0.0465092696,-0.0370866209,-0.010322744,0.0301965084,0.0570569821,0.0289802179,0.0978141204,0.0257232077,0.066059947,-0.062171258,-0.0664719,-0.0483513735,-0.0129297581,0.0603395,-0.0251161307,-0.0330939628,0.0256904922,-0.0790818408,0.00373453321,-0.0632431135,-0.138826385,0.0163993631,0.0164705142,0.0293016285,-0.00216705492,-0.0479451045,-0.0424962044,0.00175160461,-0.0283369627,-0.0523610972,-0.011024327,-0.00578534463,-0.0490727834,0.0446829461,1.51163886e-32,0.0136208562,-0.0119192945,0.00667562941,-0.0597291924,0.0174513031,-0.0322734602,-0.0359331891,-0.037091665,-0.0663549,-0.0502423234,0.0189186,-0.057699848,-0.0862019733,-0.0898436382,0.0274821967,-0.041824121,0.065552,-0.0997788236,-0.0372080803,-0.0221659075,0.00442351587,-0.0258836709,0.0243011415,0.0438887,0.0721695349,-0.031762585,-0.0533690341,-0.0394077636,-0.0026779105,0.0366266742,0.0221413,0.0598852187,-0.00215415726,-0.0120518655,-0.119717047,0.0271703042,-0.0614161044,-0.0235378239,-0.0632154793,0.038768243,0.0884646848,0.018327564,-0.00962775946,0.0377076268,-0.0464687,0.085963361,-0.0301959869,-0.0162901077,0.0376219489,0.00726507418,-0.02969715,-0.0365052372,-0.161784679,0.0547539219,0.0888894126,-0.0719949752,-0.0545605384,-0.0290137883,0.0103530884,0.0159441233,0.0282438695,-0.0211364347,-0.0420419499,0.071755223,-0.0690726414,-0.0569654591,0.0386278406,0.0291707944,0.0198712274,-0.0211053379,0.00200711493,-0.0514519215,-0.035002578,0.00741746556,-0.00642512,-0.0555602126,0.0352123678,-0.00839826558,-0.00927257,0.048825942,0.03203151,0.016476091,0.00947822444,-0.0296922531,0.0503665358,-0.029287884,0.0264118221,-0.0083190538,0.0539004877,0.00702223415,-0.060031563,0.0176583212,0.119426385,0.01003162,-0.0520707481,-1.31518363e-32,0.0503612384,0.0649248287,-0.0978127047,0.0482346527,0.0700529143,-0.00701973401,-0.00109015056,0.025050154,0.0388235413,-0.0457825474,-0.0168189649,-0.034520112,0.00737762405,0.0739948824,0.00468120351,0.0361522026,0.0962335765,0.035784822,-0.0657465905,0.0331057124,-0.0452505425,-0.0304365475,-0.0340418667,0.0150664737,-0.0074622524,0.0317734592,0.0336155742,0.0333047025,-0.051913172,0.0213129688,0.00341772311,-0.0999507904,-0.0959720165,0.0744644329,0.0700468346,-0.104893751,0.114563592,0.0455761105,-0.0466261,0.0488699079,0.0351209529,-0.00382075668,0.0174581744,0.0336453877,-0.0094186347,-0.0171950366,0.0597053766,0.0167046469,-0.0714628398,-0.0304412767,0.0972597748,0.0130681638,0.0850479305,0.0320909135,-0.00230650394,0.0644075796,0.0686545223,-0.0530810282,-0.0596763492,-0.0497675613,0.0578597113,0.0141055491,-0.0782779306,0.023105707,0.0352622718,-0.0452938154,0.0297823511,0.0543685257,0.0163934268,-0.0936013,0.0267422814,-0.13861084,0.0102219116,0.0106213866,-0.043483302,-0.00399456639,-0.0389354564,0.0485496707,0.062954016,0.0222908314,-0.0823842585,0.0241460353,-0.0314661935,0.0412493758,0.000654928794,0.0497773737,-0.0539542586,-0.0350161903,0.0742845386,-0.0100005716,0.019597657,-0.0434263125,0.0311181657,0.045849666,0.0260632113,-4.89480811e-8,0.0556149222,-0.131972492,-0.0545184091,0.0194540545,0.086463742,0.061461702,-0.00209778943,-0.0466274284,0.00848383363,0.0842705593,0.013921218,0.0927268341,-0.00283243251,0.00360598858,-0.027153369,0.0927425846,0.041863028,0.113488957,-0.0030436581,-0.0497256927,0.00632318389,0.0260654166,0.0128324274,0.00932707079,-0.112245746,0.0804629326,-0.0119498139,0.0797939897,-0.0559569858,0.0341891311,0.0118536577,0.00475944579,-0.00342048076,-0.0174320787,0.0873599723,-0.000404388295,0.0105365403,-0.0223456342,-0.0368500724,0.0818735287,0.0515183769,-0.00520085264,0.0547944233,0.0167033263,0.0362233557,-0.0272313096,0.0228156094,-0.0487788953,0.0452955402,0.0153955491,-0.0566308275,0.0421125069,0.0955483913,0.0367597938,-0.0280707479,0.0493604131,0.0288739949,0.0104856789,-0.0459176973,-0.0426206216,0.054714147,0.0157429352,-0.0260422695,0.0159485]]

# collection = Collection("rag_chatbox_db")
# index_params = {
#     "index_type": IndexType.HNSW,  # You can choose other types like IVF_SQ8, HNSW, etc.
#     "metric_type": "L2",  # L2 distance for Euclidean space
#     "params": {"nlist": 100}  # nlist controls the number of partitions (you can adjust this)
# }
# collection.create_index(field_name="embedding", index_params=index_params)
# collection.load()
# iterator = collection.search_iterator(
#     data=query_vectors,
#     anns_field="embedding",
#     param={"metric_type": "L2", "params": {"nprobe": 16}},
#     # highlight-next-line
#     batch_size=50,
#     output_fields=["metadata"],
#     # highlight-next-line
#     limit=5
# )

# results = []

# while True:
#     # highlight-next-line
#     result = iterator.next()
#     if not result:
#         # highlight-next-line
#         iterator.close()
#         break
    
#     for hit in result:
#         results.append(hit.to_dict())
        
# print(results)

# from llama_index.core import Settings
# from llama_index.llms.ollama import Ollama

# Settings.llm = Ollama(model="legalllama", request_timeout=100.0, additional_kwargs={"num_predict": 200}, temperature=0.0)
# resp = Settings.llm.complete("###Instruction\ninstruction: \n\n### Question\nquestion: Giấy khai sinh có giá trị pháp lý như thế nào?\n\n### Answer ")
# print(resp)
